/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var table = ee.FeatureCollection("FAO/GAUL/2015/level1"),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Point([1.5475472589436645, 41.971910992824625]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var AOI = table.filterBounds(geometry).geometry()
   
var CHIRPS = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY').filterBounds(AOI).filter(ee.Filter.date('2019-01-01', '2019-12-31'));

var precipitation = CHIRPS.select('precipitation').mean().clip(AOI)

var precipitationVis = {
  min: 0.0,
  max: 5.0,
  palette: ['red', 'orange', 'green', 'blue'],
};
Map.setOptions('SATELLITE');
Map.centerObject(AOI);
Map.addLayer(precipitation.clip(AOI), precipitationVis, 'Precipitation');

/////////// Create points extracted from the mean CHIRPS Image 

var samples = precipitation.addBands(ee.Image.pixelLonLat())
  .sample({region: AOI, numPixels: 100,
    scale:5000})
  .map(function(sample) {
    var lat = sample.get('latitude');
    var lon = sample.get('longitude');
    var prec = sample.get('precipitation');
    return ee.Feature(ee.Geometry.Point([lon, lat]), {prec: prec});
  });

Map.addLayer(samples, {color: 'blue',strokeWidth: 1}, 'Sample Points');


var combinedReducer = ee.Reducer.mean().combine({
  reducer2: ee.Reducer.stdDev(),
  sharedInputs: true});


////////// Stats needed for IDW

var stats = samples.reduceColumns({
  reducer: combinedReducer,
  selectors: ['prec']});
  
print(stats, "stats")


var IDW = samples.inverseDistance({
  range: 100000,
  propertyName: 'prec',
  mean: stats.get('mean'),
  stdDev: stats.get('stdDev')});

Map.addLayer(IDW.clip(AOI), precipitationVis, 'Precipitation Interpolated IDW');

var KRIGING = samples.kriging({
  range: 100000,
  shape: "gaussian",
  propertyName: "prec",
  sill:1,
  nugget:0.1
})

Map.addLayer(KRIGING.clip(AOI), precipitationVis, 'Precipitation Interpolated KRIGING');