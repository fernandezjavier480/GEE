/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var l8raw = ee.ImageCollection("LANDSAT/LC08/C01/T1"),
    l8sr = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*==========================================================================================
            PDI MEDIANTE EL USO DE LA PLATAFORMA GOOGLE EARTH ENGINE - GEE
 ===========================================================================================
  UNIDAD 1:                           INTRODUCCIÓN A GEE
 ===========================================================================================
  DOCENTE:                             ALEXANDER ARIZA
 ===========================================================================================
  Taller dirigido a profesionales y estudiantes con experiencia en el área de la geomática que  
  quieran perfeccionarse en el uso general de la plataforma Google Earth Engine - GEE, como 
  herramienta en el procesaiento digital de imágenes.
 ===========================================================================================
  Script:                          Mosaicos libres de nubes
 ===========================================================================================*/
/////////////////////////////////// LANDSAT 8 ////////////////////////////////////////////////
// MÉTODO 1: MOSAICO SOBRE DATOS RAW
/* Esto método demuestra el uso del algoritmo ee.Algorithms.Landsat.simpleComposite().
Tenga en cuenta que ee.Algorithms.Landsat.simpleCloudScore() se utiliza para ordenar
píxeles, con un reductor mediano aplicado a los píxeles menos nublados.
Tenga en cuenta que se necesitan datos sin procesar para la entrada.

Calcula un compuesto Landsat TOA a partir de una colección de escenas Landsat en bruto.
Aplica la calibración TOA estándar y luego asigna una puntuación de nube a cada píxel mediante
el algoritmo SimpleLandsatCloudScore. Selecciona el rango más bajo posible de puntuaciones de 
nubes en cada punto y luego calcula los valores de percentiles por banda a partir de los píxeles
aceptados. Este algoritmo también utiliza el algoritmo LandsatPathRowLimit para seleccionar solo
las escenas menos nubladas en regiones donde están disponibles más escenas de entrada que maxDepth.*/

//EJEMPLO 1
var simpleComposite = ee.Algorithms.Landsat.simpleComposite({
  collection: l8raw, 
  asFloat: true
});

// Agrego a mis capas en el mapa:
var visParams = {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3};
Map.addLayer(simpleComposite, visParams, 'Algotitmo de Composición simple L8 TOA');

//EJEMPLO 2
// MÉTODO 2: MOSAICO SOBRE BANDA DE CALIDAD - QA
// Este ejemplo demuestra el uso de la banda de control de calidad de píxeles para enmascarar
// nubes en los datos de reflectancia superficial (SR) del Landsat 8.

// Función para la máscara de nube de la banda pixel_qa de los datos de Landsat 8 SR.

function maskL8sr(image) {
// Los bits 3 y 5 son sombra de nube y nube, respectivamente.
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;

// Seleccione la banda de control de calidad de píxeles.
  var qa = image.select('pixel_qa');
  
// Ambos indicadores deben ponerse a cero, lo que indica condiciones claras o sin nubes.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
      .and(qa.bitwiseAnd(cloudsBitMask).eq(0));

// Devuelve la imagen enmascarada.
  return image.updateMask(mask);
}

// Mapea la función sobre la colección y reduce usando la mediana.
var composite = l8sr.map(maskL8sr).median().divide(10000);

// Muestra los resultados:
Map.addLayer(composite, visParams, 'Mosaico sin nubes - QA - BOA');

//EJEMPLO 3: MOSAICO USANDO CLOUD COVER Y BQA

/*Este metodo utiliza la banda de control de calidad de píxeles para enmascarar
 nubes en los pixeles con cobertura menor al 20% (lo que se entiende por día claro. USGS). 
 (NOTA: Tenga en cuenta que la mascara no rellena las areas faltantes) */
// Cree una funcion a parir de la banda de control QA para identificar pixels de nubes

function MascaraNubes(image) {
  var qa = image.select('BQA');

// El bit4 con valor 1 identifica pixels de nubes que podemos excluir de la imagen
  var RecorteMascara = 1 << 4;
  var Mascara = qa.bitwiseAnd(RecorteMascara).eq(0);
  return image.updateMask(Mascara);}
// Defina el porcentaje de cobertura de nubes
var cloud_perc = 20;//Max cloud percentile per scene.

var L8_col = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')
                .filterDate('2017-01-01', '2020-12-31')
                .filter(ee.Filter.lt('CLOUD_COVER', cloud_perc))
                .map(MascaraNubes);

// Mapea la función sobre la colección de Landsat 8.
var Color_comp =   {bands:"B4,B3,B2", min: 0.0, max: 0.2, gamma: 1};

// Agregar
Map.addLayer(L8_col, Color_comp, 'Mosaico Landsat 8 TOA');
                

/////////////////////////////////// SENTINEL 2 ////////////////////////////////////////////////

//Para el caso de Sentinel 2 empleamos la banda de calidad llamada QA60
function MascaraS2(image) {
  var qa = image.select('QA60');

//Excluimos los pixel identificados como nubes y cirros de la imagen
  var Nubes = 1 << 10;
  var Cirros = 1 << 11;
  var Mascara = qa.bitwiseAnd(Nubes).eq(0)
      .and(qa.bitwiseAnd(Cirros).eq(0));
  return image.updateMask(Mascara);}

//Realizamos una llamada a la colección de imágenes Sentinel y filtramos por fecha y cobertura de nubes
var S2 = ee.ImageCollection('COPERNICUS/S2')
   .filterDate('20-01-01', '2020-12-30')
   .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
   .map(MascaraS2);

// Mapea la función sobre la colección de Sentinel 2.
var rgbVis = {
  min: 0.0,
  max: 5000.0,
  bands: ['B4', 'B3', 'B2'],};
Map.addLayer(S2.median(), rgbVis, 'Mosaico sin nubes Sentinel 2');